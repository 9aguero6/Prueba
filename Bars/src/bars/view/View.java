/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bars.view;

import bars.controller.Controller;
import bars.model.Data;
import bars.model.Model;
import java.awt.Color;
import java.awt.Graphics;
import java.util.Observable;
import java.util.Observer;

/**
 *
 * @author Escinf
 */
public class View extends javax.swing.JFrame implements Observer {

    /**
     * Creates new form View
     */
    public View() {
        initComponents();
        this.setSize(600,400);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        columna = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        valor = new javax.swing.JTextField();
        agregar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(400, 400));
        getContentPane().setLayout(null);

        jLabel1.setText("Columna");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(18, 22, 60, 20);
        getContentPane().add(columna);
        columna.setBounds(90, 20, 67, 26);

        jLabel2.setText("Valor");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(180, 20, 40, 20);
        getContentPane().add(valor);
        valor.setBounds(220, 20, 43, 26);

        agregar.setText("Agregar");
        getContentPane().add(agregar);
        agregar.setBounds(280, 20, 90, 29);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new View().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton agregar;
    private javax.swing.JTextField columna;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField valor;
    // End of variables declaration//GEN-END:variables

public String getColumna(){
    return columna.getText();
}

public String getValor(){
    return valor.getText();
}


    @Override
    public void update(Observable updatedModel,Object param){        
        this.repaint();
    }
    
    @Override
    public void paint(Graphics g) {
        super.paint(g);
        Data d;
        g.setColor(Color.blue);
        for(int i=0; i<model.getSeries().size();i++){
            d= model.getSeries().get(i);
            g.fillRect(d.getX(),d.getY()-d.getData(),50,d.getData());
            g.drawString(d.getLabel(), d.getX(), d.getY()-d.getData()-45);
        }
}

    Model model;
    Controller controller;
    
public void setModel(Model model){
    this.model=model;
    model.addObserver(this);
}    

public void setController(Controller controller){
    this.controller = controller;
    this.agregar.addActionListener(controller);
    this.addMouseListener(controller);
    this.addMouseMotionListener(controller);
}

}
